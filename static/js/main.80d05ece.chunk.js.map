{"version":3,"sources":["add.svg","constants.js","Tasks.js","App.js","serviceWorker.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_ref","react_default","a","createElement","id","d","fill","add_SvgComponent","props","version","x","y","width","height","viewBox","style","enableBackground","xmlSpace","ENTER_KEY_CODE","__webpack_require__","p","MINUTE_IN_MILLISECONDS","Tasks","_PureComponent","_getPrototypeOf2","_this","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","concat","state","taskText","activeTasks","JSON","parse","localStorage","getItem","completedTasks","listenForEnter","event","keyCode","addNewTask","handleInputChange","e","setState","value","_this$state","task","moment","format","date","name","push","setItem","stringify","completeTask","_this$state2","filteredActiveTasks","filterTasks","setTimeout","deleteCompletedTask","taskIdToDelete","filteredCompletedTasks","activateTask","_this$state3","tasks","taskIdToFilter","filter","inherits","createClass","window","addEventListener","removeEventListener","_this2","_this$state4","className","type","placeholder","onChange","onClick","map","PureComponent","App","src_Tasks_0","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80d05ece.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"g\", null, React.createElement(\"g\", {\n  id: \"Plus\"\n}, React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M68.928,32.343H40.827V4.243C40.827,1.903,38.928,0,36.585,0s-4.242,1.903-4.242,4.242v28.101H4.242     C1.9,32.343,0,34.246,0,36.585c0,2.347,1.9,4.242,4.242,4.242h28.101v28.1c0,2.349,1.899,4.242,4.242,4.242     s4.242-1.896,4.242-4.242v-28.1h28.101c2.344,0,4.242-1.896,4.242-4.242C73.17,34.246,71.271,32.343,68.928,32.343z\",\n  fill: \"#11a9ec\"\n}))));\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    version: 1.1,\n    id: \"Capa_1\",\n    x: \"0px\",\n    y: \"0px\",\n    width: \"18px\",\n    height: \"18px\",\n    viewBox: \"0 0 73.17 73.17\",\n    style: {\n      \"enableBackground\": \"new 0 0 73.17 73.17\"\n    },\n    xmlSpace: \"preserve\"\n  }, props), _ref);\n};\n\nexport default __webpack_public_path__ + \"static/media/add.374831a1.svg\";\nexport { SvgComponent as ReactComponent };","export const ENTER_KEY_CODE = 13;\nexport const MINUTE_IN_MILLISECONDS = 60000;\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\n\nexport class Tasks extends PureComponent {\n    state = {\n        taskText: '',\n        activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || [],\n        completedTasks: [],\n    };\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener('keyup', this.listenForEnter);\n        }\n    }\n\n    componentWillUnmount() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('keyup', this.listenForEnter, true);\n        }\n    }\n\n    listenForEnter = (event) => {\n        if (event.keyCode === ENTER_KEY_CODE && this.state.taskText) {\n            this.addNewTask();\n        }\n    };\n\n    handleInputChange = (e) => {\n        this.setState({taskText: e.target.value});\n    };\n\n    addNewTask = () => {\n        const {taskText, activeTasks} = this.state;\n        const task = {\n            id: moment().format('x'), // unix timestamp\n            date: moment(),\n            name: taskText\n        };\n        activeTasks.push(task);\n        this.setState({taskText: '', activeTasks});\n        localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n    };\n\n    completeTask = (task) => () => {\n        const {activeTasks, completedTasks} = this.state;\n        completedTasks.push(task);\n        const filteredActiveTasks = this.filterTasks(activeTasks, task.id);\n        this.setState({activeTasks: filteredActiveTasks, completedTasks});\n        setTimeout(this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS); //@todo нужно переделать с записью completionTime\n        localStorage.setItem('activeTasks', JSON.stringify(filteredActiveTasks));\n    };\n\n    deleteCompletedTask = (taskIdToDelete) => () => {\n        const {completedTasks} = this.state;\n        const filteredCompletedTasks = this.filterTasks(completedTasks, taskIdToDelete);\n        this.setState({completedTasks: filteredCompletedTasks});\n    };\n\n    activateTask = (task) => () => {\n        const {activeTasks, completedTasks} = this.state; // проверить про slice\n        activeTasks.push(task);\n        const filteredCompletedTasks = this.filterTasks(completedTasks, task.id);\n        this.setState({activeTasks, completedTasks: filteredCompletedTasks});\n        localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n    };\n\n    filterTasks = (tasks, taskIdToFilter) => {\n        return tasks.filter(task => task.id !== taskIdToFilter);\n    };\n\n    render() {\n        const {taskText, activeTasks, completedTasks} = this.state;\n        return (\n            <div className=\"panelWrapper\">\n                <h1 className=\"panelTitle\">Work</h1>\n                <div className=\"taskInputWrapper\">\n                    <PlusIcon className=\"plusSign\" />\n                    <input\n                        type=\"text\"\n                        className=\"taskInput\"\n                        placeholder=\"Add new task\"\n                        value={taskText}\n                        onChange={this.handleInputChange}\n                    />\n                    <div className={`addBtn${taskText && ' active'}`} onClick={this.addNewTask}>\n                        Add\n                    </div>\n                    <div className=\"blueBottomBorder\" />\n                </div>\n                <div className=\"activeTasksWrapper\">\n                    {activeTasks.map((task) =>\n                        <div key={task.id} className=\"taskListItem\" onClick={this.completeTask(task)}>\n                            {task.name}\n                        </div>\n                    )}\n                </div>\n                <div className=\"completedTasksWrapper\">\n                    {completedTasks.map((task) => {\n                        const date = moment(task.date).format('MMM D, YYYY');\n                        return <div key={task.id} className=\"taskListItem completed\" onClick={this.activateTask(task)}>\n                            <span>{task.name}</span>\n                            <div className=\"completedDate\">{date}</div>\n                        </div>;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Tasks from './Tasks';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"appWrapper\">\n                    <h1 className=\"appTitle\">Task Manager</h1>\n                    <Tasks />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}