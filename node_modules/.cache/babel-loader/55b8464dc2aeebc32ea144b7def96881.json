{"ast":null,"code":"import _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/App.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-prettier,-svgo!./add.svg\";\nimport './App.css';\nimport Tasks from './Tasks';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskText: '',\n      newTasks: JSON.parse(localStorage.getItem('newTasks')) || [],\n      completedTasks: [{\n        name: 'Bla',\n        date: moment(),\n        id: 'hjhkjlk4566'\n      }]\n    };\n\n    _this.addNewTask = function () {\n      var _this$state = _this.state,\n          taskText = _this$state.taskText,\n          newTasks = _this$state.newTasks;\n      var task = {\n        id: moment().format('x'),\n        date: moment(),\n        name: taskText\n      };\n      newTasks.push(task);\n\n      _this.setState({\n        taskText: '',\n        newTasks: newTasks\n      });\n\n      localStorage.setItem('newTasks', JSON.stringify(newTasks));\n    };\n\n    _this.changeTaskText = function (e) {\n      _this.setState({\n        taskText: e.target.value\n      });\n    };\n\n    _this.toggleTask = function (checked, task) {\n      return function () {\n        var _this$state2 = _this.state,\n            newTasks = _this$state2.newTasks,\n            completedTasks = _this$state2.completedTasks;\n\n        if (checked) {\n          console.log('test');\n          completedTasks.push(task);\n          console.log(completedTasks);\n\n          _this.setState({\n            completedTasks: completedTasks\n          });\n        } else {\n          newTasks.push(task);\n\n          _this.setState({\n            newTasks: newTasks\n          });\n        } // console.log(checked, i);\n\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          taskText = _this$state3.taskText,\n          newTasks = _this$state3.newTasks,\n          completedTasks = _this$state3.completedTasks;\n      console.log(newTasks, completedTasks);\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"appWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"appTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Task Manager\"), React.createElement(\"div\", {\n        className: \"panelWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Work\"), React.createElement(\"div\", {\n        className: \"taskInputWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(PlusIcon, {\n        className: \"plusSign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"taskInput\",\n        placeholder: \"Add new task\",\n        value: taskText,\n        onChange: this.changeTaskText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"addBtn\".concat(taskText && ' active'),\n        onClick: this.addNewTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Add\")), React.createElement(\"div\", {\n        className: \"newTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, newTasks.map(function (task) {\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem\",\n          onClick: _this2.toggleTask(true, task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, task.name);\n      })), React.createElement(\"div\", {\n        className: \"completedTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, completedTasks.map(function (task) {\n        var date = moment(task.date).format('MMM D, YYYY');\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem completed\",\n          onClick: _this2.toggleTask(false, task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, task.name), React.createElement(\"div\", {\n          className: \"completedDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, date));\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/App.js"],"names":["React","Component","moment","Tasks","App","state","taskText","newTasks","JSON","parse","localStorage","getItem","completedTasks","name","date","id","addNewTask","task","format","push","setState","setItem","stringify","changeTaskText","e","target","value","toggleTask","checked","console","log","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './App.css';\n\nimport Tasks from './Tasks';\n\nclass App extends Component {\n  state = {\n      taskText: '',\n      newTasks: JSON.parse(localStorage.getItem('newTasks')) || [],\n      completedTasks: [{name: 'Bla', date: moment(), id: 'hjhkjlk4566'}],\n  };\n\n  addNewTask = () => {\n      const {taskText, newTasks} = this.state;\n      const task = {\n          id: moment().format('x'),\n          date: moment(),\n          name: taskText\n      };\n      newTasks.push(task);\n      this.setState({taskText: '', newTasks});\n      localStorage.setItem('newTasks', JSON.stringify(newTasks));\n  };\n\n  changeTaskText = (e) => {\n      this.setState({taskText: e.target.value});\n  };\n\n  toggleTask = (checked, task) => () => {\n      const {newTasks, completedTasks} = this.state;\n      if (checked) {\n          console.log('test');\n        completedTasks.push(task);\n        console.log(completedTasks);\n        this.setState({completedTasks});\n      } else {\n          newTasks.push(task);\n          this.setState({newTasks});\n      }\n    // console.log(checked, i);\n  };\n\n  render() {\n      const {taskText, newTasks, completedTasks} = this.state;\n      console.log(newTasks, completedTasks);\n      return (\n      <div className=\"app\">\n          <div className=\"appWrapper\">\n            <h1 className=\"appTitle\">Task Manager</h1>\n              <div className=\"panelWrapper\">\n                  <h1 className=\"panelTitle\">Work</h1>\n                  <div className=\"taskInputWrapper\">\n                      <PlusIcon className=\"plusSign\" />\n                      <input\n                          type=\"text\"\n                          className=\"taskInput\"\n                          placeholder=\"Add new task\"\n                          value={taskText}\n                          onChange={this.changeTaskText}\n                      />\n                      <div className={`addBtn${taskText && ' active'}`} onClick={this.addNewTask}>Add\n                          {/*<div className=\"blueBottomBorder\" />*/}\n                      </div>\n                  </div>\n                  <div className=\"newTasksWrapper\">\n                      {newTasks.map((task) =>\n                          <div key={task.id} className=\"taskListItem\" onClick={this.toggleTask(true, task)}>\n                              {task.name}\n                          </div>\n                      )}\n\n                      {/*<label className=\"taskListItem\">BlaBla*/}\n                      {/*<input type=\"checkbox\" className=\"checkbox\" onClick={this.toggleTask} />*/}\n                      {/*<span className=\"checkmark\" />*/}\n                      {/*</label>*/}\n                  </div>\n                  <div className=\"completedTasksWrapper\">\n                      {completedTasks.map((task) => {\n                          const date = moment(task.date).format('MMM D, YYYY');\n                          return <div key={task.id} className=\"taskListItem completed\" onClick={this.toggleTask(false, task)}>\n                              <span>{task.name}</span>\n                              <div className=\"completedDate\">{date}</div>\n                          </div>;\n                      })}\n                  </div>\n                  {/*<Tasks newTasks={newTasks} completedTasks={completedTasks} toggleTask={this.toggleTask} />*/}\n              </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}