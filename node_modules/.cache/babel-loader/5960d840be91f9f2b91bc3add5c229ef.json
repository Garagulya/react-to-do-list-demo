{"ast":null,"code":"import _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-prettier,-svgo!./add.svg\";\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\nexport var Tasks =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Tasks, _PureComponent);\n\n  function Tasks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tasks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tasks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskText: '',\n      activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || [],\n      completedTasks: []\n    };\n\n    _this.listenForEnter = function (event) {\n      if (event.keyCode === ENTER_KEY_CODE && _this.state.taskText) {\n        _this.addNewTask();\n      }\n    };\n\n    _this.handleInputChange = function (e) {\n      _this.setState({\n        taskText: e.target.value\n      });\n    };\n\n    _this.addNewTask = function () {\n      var _this$state = _this.state,\n          taskText = _this$state.taskText,\n          activeTasks = _this$state.activeTasks;\n      var task = {\n        id: moment().format('x'),\n        // unix timestamp\n        date: moment(),\n        name: taskText\n      };\n      activeTasks.push(task);\n\n      _this.setState({\n        taskText: '',\n        activeTasks: activeTasks\n      });\n\n      localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n    };\n\n    _this.completeTask = function (task) {\n      return function () {\n        var _this$state2 = _this.state,\n            activeTasks = _this$state2.activeTasks,\n            completedTasks = _this$state2.completedTasks;\n        completedTasks.push(task);\n\n        var filteredActiveTasks = _this.filterTasks(activeTasks, task.id);\n\n        _this.setState({\n          activeTasks: filteredActiveTasks,\n          completedTasks: completedTasks\n        });\n\n        setTimeout(_this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS); //@todo нужно переделать с записью completionTime\n\n        localStorage.setItem('activeTasks', JSON.stringify(filteredActiveTasks));\n      };\n    };\n\n    _this.deleteCompletedTask = function (taskIdToDelete) {\n      return function () {\n        var completedTasks = _this.state.completedTasks;\n\n        var filteredCompletedTasks = _this.filterTasks(completedTasks, taskIdToDelete);\n\n        _this.setState({\n          completedTasks: filteredCompletedTasks\n        });\n      };\n    };\n\n    _this.activateTask = function (task) {\n      return function () {\n        var _this$state3 = _this.state,\n            activeTasks = _this$state3.activeTasks,\n            completedTasks = _this$state3.completedTasks; // проверить про slice\n\n        activeTasks.push(task);\n\n        var filteredCompletedTasks = _this.filterTasks(completedTasks, task.id);\n\n        _this.setState({\n          activeTasks: activeTasks,\n          completedTasks: filteredCompletedTasks\n        });\n\n        localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n      };\n    };\n\n    _this.filterTasks = function (tasks, taskIdToFilter) {\n      return tasks.filter(function (task) {\n        return task.id !== taskIdToFilter;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Tasks, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof window !== 'undefined') {\n        window.addEventListener('keyup', this.listenForEnter);\n        window.addEventListener('beforeunload', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.saveTasksToLocalStorage();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('keyup', this.listenForEnter);\n        window.removeEventListener('beforeunload', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state4 = this.state,\n          taskText = _this$state4.taskText,\n          activeTasks = _this$state4.activeTasks,\n          completedTasks = _this$state4.completedTasks;\n      return React.createElement(\"div\", {\n        className: \"panelWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Tasks\"), React.createElement(\"div\", {\n        className: \"taskInputWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(PlusIcon, {\n        className: \"plusSign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"taskInput\",\n        placeholder: \"Add new task\",\n        value: taskText,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"addBtn\".concat(taskText && ' active'),\n        onClick: this.addNewTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Add\"), React.createElement(\"div\", {\n        className: \"blueBottomBorder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"activeTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, activeTasks.map(function (task) {\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem\",\n          onClick: _this2.completeTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, task.name));\n      })), React.createElement(\"div\", {\n        className: \"completedTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, completedTasks.map(function (task) {\n        var date = moment(task.date).format('MMM D, YYYY');\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem completed\",\n          onClick: _this2.activateTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, task.name), React.createElement(\"div\", {\n          className: \"completedDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, date));\n      })));\n    }\n  }]);\n\n  return Tasks;\n}(PureComponent);\nexport default Tasks;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js"],"names":["React","PureComponent","moment","ENTER_KEY_CODE","MINUTE_IN_MILLISECONDS","Tasks","state","taskText","activeTasks","JSON","parse","localStorage","getItem","completedTasks","listenForEnter","event","keyCode","addNewTask","handleInputChange","e","setState","target","value","task","id","format","date","name","push","setItem","stringify","completeTask","filteredActiveTasks","filterTasks","setTimeout","deleteCompletedTask","taskIdToDelete","filteredCompletedTasks","activateTask","tasks","taskIdToFilter","filter","window","addEventListener","saveTasksToLocalStorage","removeEventListener","map"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\n\nexport class Tasks extends PureComponent {\n    state = {\n        taskText: '',\n        activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || [],\n        completedTasks: [],\n    };\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener('keyup', this.listenForEnter);\n            window.addEventListener('beforeunload', this.saveTasksToLocalStorage);\n        }\n    }\n\n    componentWillUnmount() {\n        this.saveTasksToLocalStorage();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('keyup', this.listenForEnter);\n            window.removeEventListener('beforeunload', this.saveTasksToLocalStorage);\n        }\n    }\n\n    listenForEnter = (event) => {\n        if (event.keyCode === ENTER_KEY_CODE && this.state.taskText) {\n            this.addNewTask();\n        }\n    };\n\n    handleInputChange = (e) => {\n        this.setState({taskText: e.target.value});\n    };\n\n    addNewTask = () => {\n        const {taskText, activeTasks} = this.state;\n        const task = {\n            id: moment().format('x'), // unix timestamp\n            date: moment(),\n            name: taskText\n        };\n        activeTasks.push(task);\n        this.setState({taskText: '', activeTasks});\n        localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n    };\n\n    completeTask = (task) => () => {\n        const {activeTasks, completedTasks} = this.state;\n        completedTasks.push(task);\n        const filteredActiveTasks = this.filterTasks(activeTasks, task.id);\n        this.setState({activeTasks: filteredActiveTasks, completedTasks});\n        setTimeout(this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS); //@todo нужно переделать с записью completionTime\n        localStorage.setItem('activeTasks', JSON.stringify(filteredActiveTasks));\n    };\n\n    deleteCompletedTask = (taskIdToDelete) => () => {\n        const {completedTasks} = this.state;\n        const filteredCompletedTasks = this.filterTasks(completedTasks, taskIdToDelete);\n        this.setState({completedTasks: filteredCompletedTasks});\n    };\n\n    activateTask = (task) => () => {\n        const {activeTasks, completedTasks} = this.state; // проверить про slice\n        activeTasks.push(task);\n        const filteredCompletedTasks = this.filterTasks(completedTasks, task.id);\n        this.setState({activeTasks, completedTasks: filteredCompletedTasks});\n        localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n    };\n\n    filterTasks = (tasks, taskIdToFilter) => {\n        return tasks.filter(task => task.id !== taskIdToFilter);\n    };\n\n    render() {\n        const {taskText, activeTasks, completedTasks} = this.state;\n        return (\n            <div className=\"panelWrapper\">\n                <h1 className=\"panelTitle\">Tasks</h1>\n                <div className=\"taskInputWrapper\">\n                    <PlusIcon className=\"plusSign\" />\n                    <input\n                        type=\"text\"\n                        className=\"taskInput\"\n                        placeholder=\"Add new task\"\n                        value={taskText}\n                        onChange={this.handleInputChange}\n                    />\n                    <div className={`addBtn${taskText && ' active'}`} onClick={this.addNewTask}>\n                        Add\n                    </div>\n                    <div className=\"blueBottomBorder\" />\n                </div>\n                <div className=\"activeTasksWrapper\">\n                    {activeTasks.map((task) =>\n                        <div key={task.id} className=\"taskListItem\" onClick={this.completeTask(task)}>\n                            <span className=\"taskText\">{task.name}</span>\n                        </div>\n                    )}\n                </div>\n                <div className=\"completedTasksWrapper\">\n                    {completedTasks.map((task) => {\n                        const date = moment(task.date).format('MMM D, YYYY');\n                        return <div key={task.id} className=\"taskListItem completed\" onClick={this.activateTask(task)}>\n                            <span className=\"taskText\">{task.name}</span>\n                            <div className=\"completedDate\">{date}</div>\n                        </div>;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}