{"ast":null,"code":"import _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/TaskInput.js\";\nimport React, { PureComponent } from 'react';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-prettier,-svgo!./add.svg\";\nimport './TaskInput.css';\nimport { ENTER_KEY_CODE } from \"./constants\";\nexport var TaskInput =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(TaskInput, _PureComponent);\n\n  function TaskInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TaskInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskText: ''\n    };\n\n    _this.listenForEnter = function (event) {\n      if (event.keyCode === ENTER_KEY_CODE && _this.props.taskText) {\n        _this.props.addNewTask();\n      }\n    };\n\n    _this.handleInputChange = function (e) {\n      _this.setState({\n        taskText: e.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TaskInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof window !== 'undefined') {\n        window.addEventListener('keyup', this.listenForEnter);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('keyup', this.listenForEnter);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          taskText = _this$props.taskText,\n          handleInputChange = _this$props.handleInputChange,\n          addNewTask = _this$props.addNewTask;\n      return React.createElement(\"div\", {\n        className: \"taskInputWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(PlusIcon, {\n        className: \"plusSign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"taskInput\",\n        placeholder: \"Add new task\",\n        value: taskText,\n        onChange: handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"addBtn\".concat(taskText && ' active'),\n        onClick: addNewTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Add\"), React.createElement(\"div\", {\n        className: \"blueBottomBorder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TaskInput;\n}(PureComponent);\nexport default TaskInput;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/TaskInput.js"],"names":["React","PureComponent","ENTER_KEY_CODE","TaskInput","state","taskText","listenForEnter","event","keyCode","props","addNewTask","handleInputChange","e","setState","target","value","window","addEventListener","removeEventListener"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;AAGA,OAAO,iBAAP;AACA,SAAQC,cAAR,QAA6B,aAA7B;AAEA,WAAaC,SAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACIC,KADJ,GACY;AACJC,MAAAA,QAAQ,EAAE;AADN,KADZ;;AAAA,UAiBIC,cAjBJ,GAiBqB,UAACC,KAAD,EAAW;AACxB,UAAIA,KAAK,CAACC,OAAN,KAAkBN,cAAlB,IAAoC,MAAKO,KAAL,CAAWJ,QAAnD,EAA6D;AACzD,cAAKI,KAAL,CAAWC,UAAX;AACH;AACJ,KArBL;;AAAA,UAuBIC,iBAvBJ,GAuBwB,UAACC,CAAD,EAAO;AACvB,YAAKC,QAAL,CAAc;AAACR,QAAAA,QAAQ,EAAEO,CAAC,CAACE,MAAF,CAASC;AAApB,OAAd;AACH,KAzBL;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAKwB;AAChB,UAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,QAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,KAAKX,cAAtC;AACH;AACJ;AATL;AAAA;AAAA,2CAW2B;AACnB,UAAI,OAAOU,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,QAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoC,KAAKZ,cAAzC;AACH;AACJ;AAfL;AAAA;AAAA,6BA2Ba;AAAA,wBAC6C,KAAKG,KADlD;AAAA,UACEJ,QADF,eACEA,QADF;AAAA,UACYM,iBADZ,eACYA,iBADZ;AAAA,UAC+BD,UAD/B,eAC+BA,UAD/B;AAEL,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,SAAS,EAAC,WAFd;AAGI,QAAA,WAAW,EAAC,cAHhB;AAII,QAAA,KAAK,EAAEL,QAJX;AAKI,QAAA,QAAQ,EAAEM,iBALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EASI;AAAK,QAAA,SAAS,kBAAWN,QAAQ,IAAI,SAAvB,CAAd;AAAkD,QAAA,OAAO,EAAEK,UAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eATJ,EAYI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZJ,CADJ;AAgBH;AA7CL;;AAAA;AAAA,EAA+BT,aAA/B;AAgDA,eAAeE,SAAf","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './TaskInput.css';\nimport {ENTER_KEY_CODE} from \"./constants\";\n\nexport class TaskInput extends PureComponent {\n    state = {\n        taskText: ''\n    }\n\n    componentDidMount() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener('keyup', this.listenForEnter);\n        }\n    }\n\n    componentWillUnmount() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('keyup', this.listenForEnter);\n        }\n    }\n\n    listenForEnter = (event) => {\n        if (event.keyCode === ENTER_KEY_CODE && this.props.taskText) {\n            this.props.addNewTask();\n        }\n    };\n\n    handleInputChange = (e) => {\n        this.setState({taskText: e.target.value});\n    };\n\n    render() {\n        const {taskText, handleInputChange, addNewTask} = this.props;\n        return (\n            <div className=\"taskInputWrapper\">\n                <PlusIcon className=\"plusSign\" />\n                <input\n                    type=\"text\"\n                    className=\"taskInput\"\n                    placeholder=\"Add new task\"\n                    value={taskText}\n                    onChange={handleInputChange}\n                />\n                <div className={`addBtn${taskText && ' active'}`} onClick={addNewTask}>\n                    Add\n                </div>\n                <div className=\"blueBottomBorder\" />\n            </div>\n        );\n    }\n}\n\nexport default TaskInput;\n"]},"metadata":{},"sourceType":"module"}