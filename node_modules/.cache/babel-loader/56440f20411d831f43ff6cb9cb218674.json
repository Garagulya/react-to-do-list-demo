{"ast":null,"code":"import _toConsumableArray from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport TaskInput from './TaskInput';\nimport './Tasks.css';\nimport { MINUTE_IN_MILLISECONDS } from \"./constants\";\nexport var Tasks =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Tasks, _PureComponent);\n\n  function Tasks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tasks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tasks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      activeTasks: [],\n      completedTasks: []\n    };\n\n    _this.saveTasksToLocalStorage = function (newActiveTasks) {\n      localStorage.setItem('activeTasks', JSON.stringify(newActiveTasks));\n    };\n\n    _this.addNewTask = function (taskText) {\n      var newTask = {\n        id: moment().format('x'),\n        // unix timestamp in milliseconds (now)\n        activationDate: moment(),\n        // date (now)\n        name: taskText\n      };\n\n      var newActiveTasks = _toConsumableArray(_this.state.activeTasks).concat([newTask]);\n\n      _this.setState({\n        activeTasks: newActiveTasks\n      });\n\n      _this.saveTasksToLocalStorage(newActiveTasks);\n    };\n\n    _this.completeTask = function (task) {\n      return function () {\n        var filteredActiveTasks = _this.filterTasks(_this.state.activeTasks, task.id);\n\n        var taskWithCompletionTime = Object.assign(task, {\n          completionTime: moment().format('x')\n        });\n\n        _this.setState(function (prevState) {\n          return {\n            activeTasks: filteredActiveTasks,\n            completedTasks: _toConsumableArray(prevState.completedTasks).concat([taskWithCompletionTime])\n          };\n        });\n\n        setTimeout(_this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS);\n      };\n    };\n\n    _this.deleteCompletedTask = function (taskIdToDelete) {\n      return function () {\n        var completedTasks = _this.state.completedTasks;\n        var taskToDelete = completedTasks.find(function (task) {\n          return task.id === taskIdToDelete;\n        });\n\n        if (taskToDelete) {\n          var timePassedSinceCompletion = moment().format('x') - taskToDelete.completionTime;\n\n          if (timePassedSinceCompletion >= MINUTE_IN_MILLISECONDS) {\n            var filteredCompletedTasks = _this.filterTasks(completedTasks, taskIdToDelete);\n\n            _this.setState({\n              completedTasks: filteredCompletedTasks\n            });\n          }\n        }\n      };\n    };\n\n    _this.activateTask = function (task) {\n      return function () {\n        var filteredCompletedTasks = _this.filterTasks(_this.state.completedTasks, task.id);\n\n        var newActiveTasks = _toConsumableArray(_this.state.activeTasks).concat([task]);\n\n        _this.setState({});\n\n        _this.setState({\n          activeTasks: newActiveTasks,\n          completedTasks: filteredCompletedTasks\n        });\n\n        _this.saveTasksToLocalStorage(newActiveTasks);\n      };\n    };\n\n    _this.filterTasks = function (tasks, taskIdToFilter) {\n      return tasks.filter(function (task) {\n        return task.id !== taskIdToFilter;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Tasks, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || []\n      });\n\n      if (typeof window !== 'undefined') {\n        window.addEventListener('pagehide', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.saveTasksToLocalStorage();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('pagehide', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          taskText = _this$state.taskText,\n          activeTasks = _this$state.activeTasks,\n          completedTasks = _this$state.completedTasks;\n      return React.createElement(\"div\", {\n        className: \"panelWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Tasks\"), React.createElement(TaskInput, {\n        taskText: taskText,\n        addNewTask: this.addNewTask,\n        handleInputChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"activeTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, activeTasks.map(function (task) {\n        var activationDate = moment(task.activationDate).format('MMM D, YYYY');\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem\",\n          onClick: _this2.completeTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, task.name)), React.createElement(\"div\", {\n          className: \"activationDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, activationDate));\n      })), React.createElement(\"div\", {\n        className: \"completedTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, completedTasks.map(function (task) {\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem completed\",\n          onClick: _this2.activateTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, task.name)));\n      })));\n    }\n  }]);\n\n  return Tasks;\n}(PureComponent);\nexport default Tasks;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js"],"names":["React","PureComponent","moment","TaskInput","MINUTE_IN_MILLISECONDS","Tasks","state","activeTasks","completedTasks","saveTasksToLocalStorage","newActiveTasks","localStorage","setItem","JSON","stringify","addNewTask","taskText","newTask","id","format","activationDate","name","setState","completeTask","task","filteredActiveTasks","filterTasks","taskWithCompletionTime","Object","assign","completionTime","prevState","setTimeout","deleteCompletedTask","taskIdToDelete","taskToDelete","find","timePassedSinceCompletion","filteredCompletedTasks","activateTask","tasks","taskIdToFilter","filter","parse","getItem","window","addEventListener","removeEventListener","handleInputChange","map"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport TaskInput from './TaskInput';\nimport './Tasks.css';\nimport { MINUTE_IN_MILLISECONDS } from \"./constants\";\n\nexport class Tasks extends PureComponent {\n    state = {\n        activeTasks: [],\n        completedTasks: [],\n    };\n\n    componentDidMount() {\n        this.setState({activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || []});\n        if (typeof window !== 'undefined') {\n            window.addEventListener('pagehide', this.saveTasksToLocalStorage);\n        }\n    }\n\n    componentWillUnmount() {\n        this.saveTasksToLocalStorage();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('pagehide', this.saveTasksToLocalStorage);\n        }\n    }\n\n    saveTasksToLocalStorage = (newActiveTasks) => {\n        localStorage.setItem('activeTasks', JSON.stringify(newActiveTasks));\n    };\n\n    addNewTask = (taskText) => {\n        const newTask = {\n            id: moment().format('x'), // unix timestamp in milliseconds (now)\n            activationDate: moment(), // date (now)\n            name: taskText\n        };\n        const newActiveTasks = [...this.state.activeTasks, newTask];\n        this.setState({activeTasks: newActiveTasks});\n        this.saveTasksToLocalStorage(newActiveTasks);\n    };\n\n    completeTask = (task) => () => {\n        const filteredActiveTasks = this.filterTasks(this.state.activeTasks, task.id);\n        const taskWithCompletionTime = Object.assign(task, {completionTime: moment().format('x')});\n        this.setState(prevState => ({\n            activeTasks: filteredActiveTasks,\n            completedTasks: [...prevState.completedTasks, taskWithCompletionTime]\n        }));\n        setTimeout(this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS);\n    };\n\n    deleteCompletedTask = (taskIdToDelete) => () => {\n        const {completedTasks} = this.state;\n        const taskToDelete = completedTasks.find(task => task.id === taskIdToDelete);\n        if (taskToDelete) {\n            const timePassedSinceCompletion = moment().format('x') - taskToDelete.completionTime;\n            if (timePassedSinceCompletion >= MINUTE_IN_MILLISECONDS) {\n                const filteredCompletedTasks = this.filterTasks(completedTasks, taskIdToDelete);\n                this.setState({completedTasks: filteredCompletedTasks});\n            }\n        }\n    };\n\n    activateTask = (task) => () => {\n        const filteredCompletedTasks = this.filterTasks(this.state.completedTasks, task.id);\n        const newActiveTasks = [...this.state.activeTasks, task];\n        this.setState({});\n        this.setState({\n            activeTasks: newActiveTasks,\n            completedTasks: filteredCompletedTasks\n        });\n        this.saveTasksToLocalStorage(newActiveTasks);\n    };\n\n    filterTasks = (tasks, taskIdToFilter) => {\n        return tasks.filter(task => task.id !== taskIdToFilter);\n    };\n\n    render() {\n        const {taskText, activeTasks, completedTasks} = this.state;\n        return (\n            <div className=\"panelWrapper\">\n                <h1 className=\"panelTitle\">Tasks</h1>\n                <TaskInput taskText={taskText} addNewTask={this.addNewTask} handleInputChange={this.handleInputChange} />\n                <div className=\"activeTasksWrapper\">\n                    {activeTasks.map((task) => {\n                        const activationDate = moment(task.activationDate).format('MMM D, YYYY');\n                        return <div key={task.id} className=\"taskListItem\" onClick={this.completeTask(task)}>\n                            <div className=\"taskText\"><span>{task.name}</span></div>\n                            <div className=\"activationDate\">{activationDate}</div>\n                        </div>;\n                    })}\n                </div>\n                <div className=\"completedTasksWrapper\">\n                    {completedTasks.map((task) =>\n                        <div key={task.id} className=\"taskListItem completed\" onClick={this.activateTask(task)}>\n                            <div className=\"taskText\"><span>{task.name}</span></div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}