{"ast":null,"code":"import _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/App.js\";\nimport React, { Component, PureComponent } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-prettier,-svgo!./add.svg\";\nimport './App.css';\nimport Tasks from './Tasks'; // class Task extends PureComponent {\n//     render() {\n//         const {task, toggleTask} = this.props;\n//         return (\n//             <div key={task.id} className=\"taskListItem\" onClick={toggleTask(true, task)}>\n//                 {task.name}\n//             </div>\n//         )\n//     }\n// }\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // state = {\n    //     taskText: '',\n    //     newTasks: JSON.parse(localStorage.getItem('newTasks')) || [],\n    //     completedTasks: [{name: 'Bla', date: moment(), id: moment().format('x')}],\n    // };\n    //\n    // addNewTask = () => {\n    //     const {taskText, newTasks} = this.state;\n    //     const task = {\n    //         id: moment().format('x'),\n    //         date: moment(),\n    //         name: taskText\n    //     };\n    //     newTasks.push(task);\n    //     this.setState({taskText: '', newTasks});\n    //     localStorage.setItem('newTasks', JSON.stringify(newTasks));\n    // };\n    //\n    // changeTaskText = (e) => {\n    //     this.setState({taskText: e.target.value});\n    // };\n    //\n    // toggleTask = (checked, task) => () => {\n    //     const {newTasks, completedTasks} = this.state;\n    //     if (checked) {\n    //       completedTasks.push(task);\n    //       const filteredNewTasks = newTasks.filter(newTask => newTask.id !== task.id);\n    //         this.setState({newTasks: filteredNewTasks, completedTasks});\n    //     } else {\n    //         newTasks.push(task);\n    //         const filteredCompletedTasks = completedTasks.filter(completedTask => completedTask.id !== task.id);\n    //         this.setState({newTasks, completedTasks: filteredCompletedTasks});\n    //     }\n    // };\n    value: function render() {\n      // const {taskText, newTasks, completedTasks} = this.state;\n      // console.log(newTasks, completedTasks);\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"appWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"appTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Task Manager\"), React.createElement(Tasks, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/App.js"],"names":["React","Component","PureComponent","moment","Tasks","App"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,G;;;;;;;;;;;;;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACL;AACA;AACA,aACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CADA;AA4CH;;;;EAnFeJ,S;;AAsFlB,eAAeI,GAAf","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './App.css';\nimport Tasks from './Tasks';\n\n// class Task extends PureComponent {\n//     render() {\n//         const {task, toggleTask} = this.props;\n//         return (\n//             <div key={task.id} className=\"taskListItem\" onClick={toggleTask(true, task)}>\n//                 {task.name}\n//             </div>\n//         )\n//     }\n// }\n\nclass App extends Component {\n  // state = {\n  //     taskText: '',\n  //     newTasks: JSON.parse(localStorage.getItem('newTasks')) || [],\n  //     completedTasks: [{name: 'Bla', date: moment(), id: moment().format('x')}],\n  // };\n  //\n  // addNewTask = () => {\n  //     const {taskText, newTasks} = this.state;\n  //     const task = {\n  //         id: moment().format('x'),\n  //         date: moment(),\n  //         name: taskText\n  //     };\n  //     newTasks.push(task);\n  //     this.setState({taskText: '', newTasks});\n  //     localStorage.setItem('newTasks', JSON.stringify(newTasks));\n  // };\n  //\n  // changeTaskText = (e) => {\n  //     this.setState({taskText: e.target.value});\n  // };\n  //\n  // toggleTask = (checked, task) => () => {\n  //     const {newTasks, completedTasks} = this.state;\n  //     if (checked) {\n  //       completedTasks.push(task);\n  //       const filteredNewTasks = newTasks.filter(newTask => newTask.id !== task.id);\n  //         this.setState({newTasks: filteredNewTasks, completedTasks});\n  //     } else {\n  //         newTasks.push(task);\n  //         const filteredCompletedTasks = completedTasks.filter(completedTask => completedTask.id !== task.id);\n  //         this.setState({newTasks, completedTasks: filteredCompletedTasks});\n  //     }\n  // };\n\n  render() {\n      // const {taskText, newTasks, completedTasks} = this.state;\n      // console.log(newTasks, completedTasks);\n      return (\n      <div className=\"app\">\n          <div className=\"appWrapper\">\n            <h1 className=\"appTitle\">Task Manager</h1>\n              <Tasks />\n              {/*<div className=\"panelWrapper\">*/}\n                  {/*<h1 className=\"panelTitle\">Work</h1>*/}\n                  {/*<div className=\"taskInputWrapper\">*/}\n                      {/*<PlusIcon className=\"plusSign\" />*/}\n                      {/*<input*/}\n                          {/*type=\"text\"*/}\n                          {/*className=\"taskInput\"*/}\n                          {/*placeholder=\"Add new task\"*/}\n                          {/*value={taskText}*/}\n                          {/*onChange={this.changeTaskText}*/}\n                      {/*/>*/}\n                      {/*<div className={`addBtn${taskText && ' active'}`} onClick={this.addNewTask}>Add*/}\n                          {/*/!*<div className=\"blueBottomBorder\" />*!/*/}\n                      {/*</div>*/}\n                  {/*</div>*/}\n                  {/*<div className=\"newTasksWrapper\">*/}\n                      {/*{newTasks.map((task, i) =>*/}\n                          {/*<Task key={i} task={task} toggleTask={this.toggleTask} />*/}\n                      {/*)}*/}\n\n                      {/*/!*<label className=\"taskListItem\">BlaBla*!/*/}\n                      {/*/!*<input type=\"checkbox\" className=\"checkbox\" onClick={this.toggleTask} />*!/*/}\n                      {/*/!*<span className=\"checkmark\" />*!/*/}\n                      {/*/!*</label>*!/*/}\n                  {/*</div>*/}\n                  {/*<div className=\"completedTasksWrapper\">*/}\n                      {/*{completedTasks.map((task) => {*/}\n                          {/*const date = moment(task.date).format('MMM D, YYYY');*/}\n                          {/*return <div key={task.id} className=\"taskListItem completed\" onClick={this.toggleTask(false, task)}>*/}\n                              {/*<span>{task.name}</span>*/}\n                              {/*<div className=\"completedDate\">{date}</div>*/}\n                          {/*</div>;*/}\n                      {/*})}*/}\n                  {/*</div>*/}\n                  {/*/!*<Tasks newTasks={newTasks} completedTasks={completedTasks} toggleTask={this.toggleTask} />*!/*/}\n              {/*</div>*/}\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}