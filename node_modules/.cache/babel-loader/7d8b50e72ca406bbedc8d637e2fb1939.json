{"ast":null,"code":"import _toConsumableArray from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-prettier,-svgo!./add.svg\";\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\nexport var Tasks =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Tasks, _PureComponent);\n\n  function Tasks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tasks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tasks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskText: '',\n      activeTasks: [],\n      completedTasks: []\n    };\n\n    _this.listenForEnter = function (event) {\n      if (event.keyCode === ENTER_KEY_CODE && _this.state.taskText) {\n        _this.addNewTask();\n      }\n    };\n\n    _this.saveTasksToLocalStorage = function () {\n      var activeTasks = _this.state.activeTasks;\n\n      if (activeTasks.length) {\n        localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n      }\n    };\n\n    _this.handleInputChange = function (e) {\n      _this.setState({\n        taskText: e.target.value\n      });\n    };\n\n    _this.addNewTask = function () {\n      var newTask = {\n        id: moment().format('x'),\n        // unix timestamp\n        activationDate: moment(),\n        name: _this.state.taskText\n      };\n\n      _this.setState(function (prevState) {\n        return {\n          taskText: '',\n          activeTasks: _toConsumableArray(prevState.activeTasks).concat([newTask])\n        };\n      });\n    };\n\n    _this.completeTask = function (task) {\n      return function () {\n        var filteredActiveTasks = _this.filterTasks(_this.state.activeTasks, task.id);\n\n        var taskWithCompletionTime = {\n          completionTime: moment().format('x')\n        }; // unix timestamp in milliseconds\n\n        Object.assign(taskWithCompletionTime, task);\n\n        _this.setState(function (prevState) {\n          return {\n            activeTasks: filteredActiveTasks,\n            completedTasks: _toConsumableArray(prevState.completedTasks).concat([taskWithCompletionTime])\n          };\n        });\n\n        setTimeout(_this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS); //@todo нужно переделать с записью completionTime\n      };\n    };\n\n    _this.deleteCompletedTask = function (taskIdToDelete) {\n      return function () {\n        var filteredCompletedTasks = _this.filterTasks(_this.state.completedTasks, taskIdToDelete);\n\n        _this.setState({\n          completedTasks: filteredCompletedTasks\n        });\n      };\n    };\n\n    _this.activateTask = function (task) {\n      return function () {\n        var filteredCompletedTasks = _this.filterTasks(_this.state.completedTasks, task.id);\n\n        _this.setState(function (prevState) {\n          return {\n            activeTasks: _toConsumableArray(prevState.activeTasks).concat([task]),\n            completedTasks: filteredCompletedTasks\n          };\n        });\n      };\n    };\n\n    _this.filterTasks = function (tasks, taskIdToFilter) {\n      return tasks.filter(function (task) {\n        return task.id !== taskIdToFilter;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Tasks, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || []\n      });\n\n      if (typeof window !== 'undefined') {\n        window.addEventListener('keyup', this.listenForEnter);\n        window.addEventListener('beforeunload', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.saveTasksToLocalStorage();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('keyup', this.listenForEnter);\n        window.removeEventListener('beforeunload', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          taskText = _this$state.taskText,\n          activeTasks = _this$state.activeTasks,\n          completedTasks = _this$state.completedTasks;\n      return React.createElement(\"div\", {\n        className: \"panelWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Tasks\"), React.createElement(\"div\", {\n        className: \"taskInputWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(PlusIcon, {\n        className: \"plusSign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"taskInput\",\n        placeholder: \"Add new task\",\n        value: taskText,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"addBtn\".concat(taskText && ' active'),\n        onClick: this.addNewTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Add\"), React.createElement(\"div\", {\n        className: \"blueBottomBorder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"activeTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, activeTasks.map(function (task) {\n        var activationDate = moment(task.activationDate).format('MMM D, YYYY');\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem\",\n          onClick: _this2.completeTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, task.name), React.createElement(\"div\", {\n          className: \"activationDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, activationDate));\n      })), React.createElement(\"div\", {\n        className: \"completedTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, completedTasks.map(function (task) {\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem completed\",\n          onClick: _this2.activateTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, task.name));\n      })));\n    }\n  }]);\n\n  return Tasks;\n}(PureComponent);\nexport default Tasks;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js"],"names":["React","PureComponent","moment","ENTER_KEY_CODE","MINUTE_IN_MILLISECONDS","Tasks","state","taskText","activeTasks","completedTasks","listenForEnter","event","keyCode","addNewTask","saveTasksToLocalStorage","length","localStorage","setItem","JSON","stringify","handleInputChange","e","setState","target","value","newTask","id","format","activationDate","name","prevState","completeTask","task","filteredActiveTasks","filterTasks","taskWithCompletionTime","completionTime","Object","assign","setTimeout","deleteCompletedTask","taskIdToDelete","filteredCompletedTasks","activateTask","tasks","taskIdToFilter","filter","parse","getItem","window","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\n\nexport class Tasks extends PureComponent {\n    state = {\n        taskText: '',\n        activeTasks: [],\n        completedTasks: [],\n    };\n\n    componentDidMount() {\n        this.setState({activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || []});\n        if (typeof window !== 'undefined') {\n            window.addEventListener('keyup', this.listenForEnter);\n            window.addEventListener('beforeunload', this.saveTasksToLocalStorage);\n        }\n    }\n\n    componentWillUnmount() {\n        this.saveTasksToLocalStorage();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('keyup', this.listenForEnter);\n            window.removeEventListener('beforeunload', this.saveTasksToLocalStorage);\n        }\n    }\n\n    listenForEnter = (event) => {\n        if (event.keyCode === ENTER_KEY_CODE && this.state.taskText) {\n            this.addNewTask();\n        }\n    };\n\n    saveTasksToLocalStorage = () => {\n        const {activeTasks} = this.state;\n        if (activeTasks.length) {\n            localStorage.setItem('activeTasks', JSON.stringify(activeTasks));\n        }\n    };\n\n    handleInputChange = (e) => {\n        this.setState({taskText: e.target.value});\n    };\n\n    addNewTask = () => {\n        const newTask = {\n            id: moment().format('x'), // unix timestamp\n            activationDate: moment(),\n            name: this.state.taskText\n        };\n        this.setState(prevState => ({\n            taskText: '',\n            activeTasks: [...prevState.activeTasks, newTask]\n        }));\n    };\n\n    completeTask = (task) => () => {\n        const filteredActiveTasks = this.filterTasks(this.state.activeTasks, task.id);\n        let taskWithCompletionTime = {completionTime: moment().format('x')}; // unix timestamp in milliseconds\n        Object.assign(taskWithCompletionTime, task);\n        this.setState(prevState => ({\n            activeTasks: filteredActiveTasks,\n            completedTasks: [...prevState.completedTasks, taskWithCompletionTime]\n        }));\n        setTimeout(this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS); //@todo нужно переделать с записью completionTime\n    };\n\n    deleteCompletedTask = (taskIdToDelete) => () => {\n        const filteredCompletedTasks = this.filterTasks(this.state.completedTasks, taskIdToDelete);\n        this.setState({completedTasks: filteredCompletedTasks});\n    };\n\n    activateTask = (task) => () => {\n        const filteredCompletedTasks = this.filterTasks(this.state.completedTasks, task.id);\n        this.setState(prevState => ({\n            activeTasks: [...prevState.activeTasks, task],\n            completedTasks: filteredCompletedTasks\n        }));\n    };\n\n    filterTasks = (tasks, taskIdToFilter) => {\n        return tasks.filter(task => task.id !== taskIdToFilter);\n    };\n\n    render() {\n        const {taskText, activeTasks, completedTasks} = this.state;\n        return (\n            <div className=\"panelWrapper\">\n                <h1 className=\"panelTitle\">Tasks</h1>\n                <div className=\"taskInputWrapper\">\n                    <PlusIcon className=\"plusSign\" />\n                    <input\n                        type=\"text\"\n                        className=\"taskInput\"\n                        placeholder=\"Add new task\"\n                        value={taskText}\n                        onChange={this.handleInputChange}\n                    />\n                    <div className={`addBtn${taskText && ' active'}`} onClick={this.addNewTask}>\n                        Add\n                    </div>\n                    <div className=\"blueBottomBorder\" />\n                </div>\n                <div className=\"activeTasksWrapper\">\n                    {activeTasks.map((task) => {\n                        const activationDate = moment(task.activationDate).format('MMM D, YYYY');\n                        return <div key={task.id} className=\"taskListItem\" onClick={this.completeTask(task)}>\n                            <span className=\"taskText\">{task.name}</span>\n                            <div className=\"activationDate\">{activationDate}</div>\n                        </div>;\n                    })}\n                </div>\n                <div className=\"completedTasksWrapper\">\n                    {completedTasks.map((task) =>\n                        <div key={task.id} className=\"taskListItem completed\" onClick={this.activateTask(task)}>\n                            <span className=\"taskText\">{task.name}</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}