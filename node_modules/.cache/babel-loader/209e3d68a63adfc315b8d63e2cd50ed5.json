{"ast":null,"code":"import _toConsumableArray from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport TaskInput from './TaskInput';\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\nexport var Tasks =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Tasks, _PureComponent);\n\n  function Tasks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tasks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tasks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // taskText: '',\n      activeTasks: [],\n      completedTasks: []\n    };\n\n    _this.addNewTask = function () {\n      var newTask = {\n        id: moment().format('x'),\n        // unix timestamp in milliseconds (now)\n        activationDate: moment(),\n        // date (now)\n        name: _this.state.taskText\n      };\n\n      _this.setState(function (prevState) {\n        return {\n          taskText: '',\n          activeTasks: _toConsumableArray(prevState.activeTasks).concat([newTask])\n        };\n      });\n    };\n\n    _this.listenForEnter = function (event) {\n      if (event.keyCode === ENTER_KEY_CODE && _this.state.taskText) {\n        _this.addNewTask();\n      }\n    };\n\n    _this.saveTasksToLocalStorage = function () {\n      localStorage.setItem('activeTasks', JSON.stringify(_this.state.activeTasks));\n    };\n\n    _this.completeTask = function (task) {\n      return function () {\n        var filteredActiveTasks = _this.filterTasks(_this.state.activeTasks, task.id);\n\n        var taskWithCompletionTime = {\n          completionTime: moment().format('x')\n        };\n        Object.assign(taskWithCompletionTime, task);\n\n        _this.setState(function (prevState) {\n          return {\n            activeTasks: filteredActiveTasks,\n            completedTasks: _toConsumableArray(prevState.completedTasks).concat([taskWithCompletionTime])\n          };\n        });\n\n        setTimeout(_this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS);\n      };\n    };\n\n    _this.deleteCompletedTask = function (taskIdToDelete) {\n      return function () {\n        var completedTasks = _this.state.completedTasks;\n        var taskToDelete = completedTasks.find(function (task) {\n          return task.id === taskIdToDelete;\n        });\n        var timePassedSinceCompletion = moment().format('x') - taskToDelete.completionTime;\n\n        if (taskToDelete && timePassedSinceCompletion >= MINUTE_IN_MILLISECONDS) {\n          var filteredCompletedTasks = _this.filterTasks(completedTasks, taskIdToDelete);\n\n          _this.setState({\n            completedTasks: filteredCompletedTasks\n          });\n        }\n      };\n    };\n\n    _this.activateTask = function (task) {\n      return function () {\n        var filteredCompletedTasks = _this.filterTasks(_this.state.completedTasks, task.id);\n\n        _this.setState(function (prevState) {\n          return {\n            activeTasks: _toConsumableArray(prevState.activeTasks).concat([task]),\n            completedTasks: filteredCompletedTasks\n          };\n        });\n      };\n    };\n\n    _this.filterTasks = function (tasks, taskIdToFilter) {\n      return tasks.filter(function (task) {\n        return task.id !== taskIdToFilter;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Tasks, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || []\n      });\n\n      if (typeof window !== 'undefined') {\n        window.addEventListener('keyup', this.listenForEnter);\n        window.addEventListener('beforeunload', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.saveTasksToLocalStorage();\n\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('keyup', this.listenForEnter);\n        window.removeEventListener('beforeunload', this.saveTasksToLocalStorage);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          taskText = _this$state.taskText,\n          activeTasks = _this$state.activeTasks,\n          completedTasks = _this$state.completedTasks;\n      return React.createElement(\"div\", {\n        className: \"panelWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Tasks\"), React.createElement(TaskInput, {\n        addNewTask: this.addNewTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"activeTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, activeTasks.map(function (task) {\n        var activationDate = moment(task.activationDate).format('MMM D, YYYY');\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem\",\n          onClick: _this2.completeTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, task.name), React.createElement(\"div\", {\n          className: \"activationDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, activationDate));\n      })), React.createElement(\"div\", {\n        className: \"completedTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, completedTasks.map(function (task) {\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem completed\",\n          onClick: _this2.activateTask(task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"taskText\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, task.name));\n      })));\n    }\n  }]);\n\n  return Tasks;\n}(PureComponent);\nexport default Tasks;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js"],"names":["React","PureComponent","moment","TaskInput","ENTER_KEY_CODE","MINUTE_IN_MILLISECONDS","Tasks","state","activeTasks","completedTasks","addNewTask","newTask","id","format","activationDate","name","taskText","setState","prevState","listenForEnter","event","keyCode","saveTasksToLocalStorage","localStorage","setItem","JSON","stringify","completeTask","task","filteredActiveTasks","filterTasks","taskWithCompletionTime","completionTime","Object","assign","setTimeout","deleteCompletedTask","taskIdToDelete","taskToDelete","find","timePassedSinceCompletion","filteredCompletedTasks","activateTask","tasks","taskIdToFilter","filter","parse","getItem","window","addEventListener","removeEventListener","map"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport TaskInput from './TaskInput';\nimport './Tasks.css';\nimport { ENTER_KEY_CODE, MINUTE_IN_MILLISECONDS } from \"./constants\";\n\nexport class Tasks extends PureComponent {\n    state = {\n        // taskText: '',\n        activeTasks: [],\n        completedTasks: [],\n    };\n\n    componentDidMount() {\n        this.setState({activeTasks: JSON.parse(localStorage.getItem('activeTasks')) || []});\n        if (typeof window !== 'undefined') {\n            window.addEventListener('keyup', this.listenForEnter);\n            window.addEventListener('beforeunload', this.saveTasksToLocalStorage);\n        }\n    }\n\n    componentWillUnmount() {\n        this.saveTasksToLocalStorage();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('keyup', this.listenForEnter);\n            window.removeEventListener('beforeunload', this.saveTasksToLocalStorage);\n        }\n    }\n\n    addNewTask = () => {\n        const newTask = {\n            id: moment().format('x'), // unix timestamp in milliseconds (now)\n            activationDate: moment(), // date (now)\n            name: this.state.taskText\n        };\n        this.setState(prevState => ({\n            taskText: '',\n            activeTasks: [...prevState.activeTasks, newTask]\n        }));\n    };\n\n    listenForEnter = (event) => {\n        if (event.keyCode === ENTER_KEY_CODE && this.state.taskText) {\n            this.addNewTask();\n        }\n    };\n\n    saveTasksToLocalStorage = () => {\n        localStorage.setItem('activeTasks', JSON.stringify(this.state.activeTasks));\n    };\n\n    completeTask = (task) => () => {\n        const filteredActiveTasks = this.filterTasks(this.state.activeTasks, task.id);\n        let taskWithCompletionTime = {completionTime: moment().format('x')};\n        Object.assign(taskWithCompletionTime, task);\n        this.setState(prevState => ({\n            activeTasks: filteredActiveTasks,\n            completedTasks: [...prevState.completedTasks, taskWithCompletionTime]\n        }));\n        setTimeout(this.deleteCompletedTask(task.id), MINUTE_IN_MILLISECONDS);\n    };\n\n    deleteCompletedTask = (taskIdToDelete) => () => {\n        const {completedTasks} = this.state;\n        const taskToDelete = completedTasks.find(task => task.id === taskIdToDelete);\n        const timePassedSinceCompletion = moment().format('x') - taskToDelete.completionTime;\n        if (taskToDelete && (timePassedSinceCompletion >= MINUTE_IN_MILLISECONDS)) {\n            const filteredCompletedTasks = this.filterTasks(completedTasks, taskIdToDelete);\n            this.setState({completedTasks: filteredCompletedTasks});\n        }\n    };\n\n    activateTask = (task) => () => {\n        const filteredCompletedTasks = this.filterTasks(this.state.completedTasks, task.id);\n        this.setState(prevState => ({\n            activeTasks: [...prevState.activeTasks, task],\n            completedTasks: filteredCompletedTasks\n        }));\n    };\n\n    filterTasks = (tasks, taskIdToFilter) => {\n        return tasks.filter(task => task.id !== taskIdToFilter);\n    };\n\n    render() {\n        const {taskText, activeTasks, completedTasks} = this.state;\n        return (\n            <div className=\"panelWrapper\">\n                <h1 className=\"panelTitle\">Tasks</h1>\n                <TaskInput addNewTask={this.addNewTask} />\n                <div className=\"activeTasksWrapper\">\n                    {activeTasks.map((task) => {\n                        const activationDate = moment(task.activationDate).format('MMM D, YYYY');\n                        return <div key={task.id} className=\"taskListItem\" onClick={this.completeTask(task)}>\n                            <span className=\"taskText\">{task.name}</span>\n                            <div className=\"activationDate\">{activationDate}</div>\n                        </div>;\n                    })}\n                </div>\n                <div className=\"completedTasksWrapper\">\n                    {completedTasks.map((task) =>\n                        <div key={task.id} className=\"taskListItem completed\" onClick={this.activateTask(task)}>\n                            <span className=\"taskText\">{task.name}</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}