{"ast":null,"code":"import _classCallCheck from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gusena/Projects/FrontendTest/to-do-list/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js\";\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from \"@svgr/webpack?-prettier,-svgo!./add.svg\";\nimport './Tasks.css'; // class Task extends PureComponent {\n//     render() {\n//         const {task, toggleTask} = this.props;\n//         return (\n//             <div key={task.id} className=\"taskListItem\" onClick={toggleTask(true, task)}>\n//                 {task.name}\n//             </div>\n//         )\n//     }\n// }\n\nexport var Tasks =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Tasks, _PureComponent);\n\n  function Tasks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tasks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tasks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskText: '',\n      newTasks: JSON.parse(localStorage.getItem('newTasks')) || [],\n      completedTasks: []\n    };\n\n    _this.addNewTask = function () {\n      var _this$state = _this.state,\n          taskText = _this$state.taskText,\n          newTasks = _this$state.newTasks;\n      var task = {\n        id: moment().format('x'),\n        date: moment(),\n        name: taskText\n      };\n      newTasks.push(task);\n\n      _this.setState({\n        taskText: '',\n        newTasks: newTasks\n      });\n    };\n\n    _this.changeTaskText = function (e) {\n      _this.setState({\n        taskText: e.target.value\n      });\n    };\n\n    _this.deleteCompletedTask = function (taskIdToDelete) {\n      return function () {\n        var completedTasks = _this.state.completedTasks;\n\n        var filteredCompletedTasks = _this.filterTasks(completedTasks, taskIdToDelete);\n\n        _this.setState({\n          completedTasks: filteredCompletedTasks\n        });\n      };\n    };\n\n    _this.filterTasks = function (tasks, taskIdToFilter) {\n      return tasks.filter(function (task) {\n        return task.id !== taskIdToFilter;\n      });\n    };\n\n    _this.toggleTask = function (checked, task) {\n      return function () {\n        var _this$state2 = _this.state,\n            newTasks = _this$state2.newTasks,\n            completedTasks = _this$state2.completedTasks;\n        var taskId = task.id;\n\n        if (checked) {\n          completedTasks.push(task);\n\n          var filteredNewTasks = _this.filterTasks(newTasks, taskId);\n\n          _this.setState({\n            newTasks: filteredNewTasks,\n            completedTasks: completedTasks\n          });\n\n          setTimeout(_this.deleteCompletedTask(task.id), 60000);\n        } else {\n          newTasks.push(task);\n\n          var filteredCompletedTasks = _this.filterTasks(completedTasks, taskId);\n\n          _this.setState({\n            newTasks: newTasks,\n            completedTasks: filteredCompletedTasks\n          });\n        } // this.updateLocalStorage();\n\n      };\n    };\n\n    _this.updateLocalStorage = function () {\n      console.log(_this.state.newTasks);\n      localStorage.setItem('newTasks', JSON.stringify(_this.state.newTasks));\n    };\n\n    return _this;\n  }\n\n  _createClass(Tasks, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // console.log('test');\n      // if (prevState.taskText)\n      this.updateLocalStorage();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          taskText = _this$state3.taskText,\n          newTasks = _this$state3.newTasks,\n          completedTasks = _this$state3.completedTasks;\n      console.log('test');\n      return React.createElement(\"div\", {\n        className: \"panelWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Work\"), React.createElement(\"div\", {\n        className: \"taskInputWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(PlusIcon, {\n        className: \"plusSign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"taskInput\",\n        placeholder: \"Add new task\",\n        value: taskText,\n        onChange: this.changeTaskText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"addBtn\".concat(taskText && ' active'),\n        onClick: this.addNewTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Add\", React.createElement(\"div\", {\n        className: \"blueBottomBorder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"newTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, newTasks.map(function (task) {\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem\",\n          onClick: _this2.toggleTask(true, task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), task.name);\n      })), React.createElement(\"div\", {\n        className: \"completedTasksWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, completedTasks.map(function (task) {\n        var date = moment(task.date).format('MMM D, YYYY');\n        return React.createElement(\"div\", {\n          key: task.id,\n          className: \"taskListItem completed\",\n          onClick: _this2.toggleTask(false, task),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, task.name), React.createElement(\"div\", {\n          className: \"completedDate\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, date));\n      })));\n    }\n  }]);\n\n  return Tasks;\n}(PureComponent);\nexport default Tasks;","map":{"version":3,"sources":["/Users/gusena/Projects/FrontendTest/to-do-list/src/Tasks.js"],"names":["React","PureComponent","moment","Tasks","state","taskText","newTasks","JSON","parse","localStorage","getItem","completedTasks","addNewTask","task","id","format","date","name","push","setState","changeTaskText","e","target","value","deleteCompletedTask","taskIdToDelete","filteredCompletedTasks","filterTasks","tasks","taskIdToFilter","filter","toggleTask","checked","taskId","filteredNewTasks","setTimeout","updateLocalStorage","console","log","setItem","stringify","prevProps","prevState","map"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport moment from 'moment';\nimport { ReactComponent as PlusIcon } from './add.svg';\nimport './Tasks.css';\n\n// class Task extends PureComponent {\n//     render() {\n//         const {task, toggleTask} = this.props;\n//         return (\n//             <div key={task.id} className=\"taskListItem\" onClick={toggleTask(true, task)}>\n//                 {task.name}\n//             </div>\n//         )\n//     }\n// }\n\nexport class Tasks extends PureComponent {\n    state = {\n        taskText: '',\n        newTasks: JSON.parse(localStorage.getItem('newTasks')) || [],\n        completedTasks: [],\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        // console.log('test');\n        // if (prevState.taskText)\n        this.updateLocalStorage();\n    }\n\n    addNewTask = () => {\n        const {taskText, newTasks} = this.state;\n        const task = {\n            id: moment().format('x'),\n            date: moment(),\n            name: taskText\n        };\n        newTasks.push(task);\n        this.setState({taskText: '', newTasks});\n    };\n\n    changeTaskText = (e) => {\n        this.setState({taskText: e.target.value});\n    };\n\n    deleteCompletedTask = (taskIdToDelete) => () => {\n        const {completedTasks} = this.state;\n        const filteredCompletedTasks = this.filterTasks(completedTasks, taskIdToDelete);\n        this.setState({completedTasks: filteredCompletedTasks});\n    };\n\n    filterTasks = (tasks, taskIdToFilter) => {\n        return tasks.filter(task => task.id !== taskIdToFilter);\n    };\n\n    toggleTask = (checked, task) => () => {\n        const {newTasks, completedTasks} = this.state;\n        const taskId = task.id;\n        if (checked) {\n            completedTasks.push(task);\n            const filteredNewTasks = this.filterTasks(newTasks, taskId);\n            this.setState({newTasks: filteredNewTasks, completedTasks});\n            setTimeout(this.deleteCompletedTask(task.id), 60000);\n        } else {\n            newTasks.push(task);\n            const filteredCompletedTasks = this.filterTasks(completedTasks, taskId);\n            this.setState({newTasks, completedTasks: filteredCompletedTasks});\n        }\n        // this.updateLocalStorage();\n    };\n\n    updateLocalStorage = () => {\n        console.log(this.state.newTasks);\n        localStorage.setItem('newTasks', JSON.stringify(this.state.newTasks));\n    };\n\n    render() {\n        const {taskText, newTasks, completedTasks} = this.state;\n        console.log('test');\n        return (\n            <div className=\"panelWrapper\">\n                <h1 className=\"panelTitle\">Work</h1>\n                <div className=\"taskInputWrapper\">\n                    <PlusIcon className=\"plusSign\" />\n                    <input\n                        type=\"text\"\n                        className=\"taskInput\"\n                        placeholder=\"Add new task\"\n                        value={taskText}\n                        onChange={this.changeTaskText}\n                    />\n                    <div className={`addBtn${taskText && ' active'}`} onClick={this.addNewTask}>Add\n                        <div className=\"blueBottomBorder\" />\n                    </div>\n                </div>\n                <div className=\"newTasksWrapper\">\n                    {newTasks.map((task) =>\n                        <div key={task.id} className=\"taskListItem\" onClick={this.toggleTask(true, task)}>\n                            <div></div>\n                            {task.name}\n                        </div>\n                    )}\n\n                    {/*<label className=\"taskListItem\">BlaBla*/}\n                    {/*<input type=\"checkbox\" className=\"checkbox\" onClick={this.toggleTask} />*/}\n                    {/*<span className=\"checkmark\" />*/}\n                    {/*</label>*/}\n                </div>\n                <div className=\"completedTasksWrapper\">\n                    {completedTasks.map((task) => {\n                        const date = moment(task.date).format('MMM D, YYYY');\n                        return <div key={task.id} className=\"taskListItem completed\" onClick={this.toggleTask(false, task)}>\n                            <div className=\"checkbox\"></div>\n                            <span>{task.name}</span>\n                            <div className=\"completedDate\">{date}</div>\n                        </div>;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}